AWSTemplateFormatVersion: '2010-09-09'

Description: Enhanced AWS architecture with VPC, EKS, ALB, RDS (Multi-AZ), S3,
  CloudWatch, Security Groups, NACLs, IAM roles, and backup routines. This
  template is self-sufficient and creates all necessary resources.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Networking Configuration
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: Database Configuration
        Parameters:
          - DBInstanceType
          - DBAllocatedStorage
          - DBUser
          - DBPassword
          - DBName
      - Label:
          default: EKS Configuration
        Parameters:
          - EKSClusterName
          - EKSDesiredSize
          - EKSMaxSize
          - EKSMinSize

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for Public Subnet 1.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 2.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Private Subnet 1.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Private Subnet 2.
  DBInstanceType:
    Type: String
    Default: db.t3.micro
    Description: The EC2 instance type for the RDS DB instance.
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t4g.micro
  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: The size of the database (in GiB).
    MinValue: 20
  DBUser:
    Type: String
    NoEcho: true
    Description: Master username for the RDS database.
    Default: dbadmin
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master password for the RDS database. Must be at least 8 characters
      and contain uppercase, lowercase, numbers, and special characters.
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9]).{8,41}$
    ConstraintDescription: Must be at least 8 characters and contain uppercase,
      lowercase, numbers, and special characters.
  DBName:
    Type: String
    Default: mydatabase
    Description: The name of the database.
  EKSClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name for the EKS Cluster.
  EKSDesiredSize:
    Type: Number
    Default: 2
    Description: Desired number of instances in the EKS Node Group.
  EKSMaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of instances in the EKS Node Group.
  EKSMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of instances in the EKS Node Group.

Resources:

  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSClusterRole

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGatewayEIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # Placed in Public Subnet 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Network Access Control Lists (NACLs)
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicNACL

  PublicInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PublicOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateNACL

  PrivateInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PrivateOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  # Security Groups (Define them first without interdependent ingress rules)
  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https to ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        # Standard ingress for ALB from internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBSG

  SecurityGroupEKSWorkers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSWorkersSG
      # Ingress rules will be added as separate resources to break dependency

  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow db connection from EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSG
      # Ingress rules will be added as separate resources to break dependency

      # Separate Security Group Ingress Rules (to break circular dependencies)

      # EKS Workers Ingress Rules
  EKSWorkersIngressFromALBHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt SecurityGroupALB.GroupId

  EKSWorkersIngressFromALBHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt SecurityGroupALB.GroupId

  EKSWorkersIngressSelfClusterTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: -1 # All protocols
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow all traffic within the EKS worker nodes security group

  # RDS Ingress Rule
  RDSIngressFromEKSWorkers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupRDS.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow MySQL traffic from EKS worker nodes

  # RDS Database
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBSubnetGroup

  MyRDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceType
      Engine: mysql
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      # Removed VpcSecurityGroupIds as it's causing an "extraneous key" error
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-05:00
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBInstance

  # EKS Cluster
  MyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !GetAtt SecurityGroupEKSWorkers.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSCluster

  MyEKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSNodegroupRole

  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyEKSCluster
      NodeRole: !GetAtt MyEKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref EKSDesiredSize
        MaxSize: !Ref EKSMaxSize
        MinSize: !Ref EKSMinSize
      Labels:
        app: my-app
      Tags:
        Name: !Sub ${AWS::StackName}-EKSNodeGroup

  # Application Load Balancer (ALB)
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt SecurityGroupALB.GroupId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB

  MyALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBTargetGroup

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyALBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBListener

  # S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-my-application-bucket-${AWS::AccountId}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-S3Bucket

  # CloudWatch Log Group for EKS
  MyEKSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/eks/${EKSClusterName}/cluster
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSLogGroup

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref MyVPC
  PublicSubnet1Id:
    Description: The ID of Public Subnet 1
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: The ID of Public Subnet 2
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: The ID of Private Subnet 1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: The ID of Private Subnet 2
    Value: !Ref PrivateSubnet2
  RDSDBEndpointAddress:
    Description: The address of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Address
  RDSDBEndpointPort:
    Description: The port of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Port
  EKSClusterName:
    Description: The name of the EKS Cluster
    Value: !Ref MyEKSCluster
  EKSClusterEndpoint:
    Description: The endpoint of the EKS Cluster
    Value: !GetAtt MyEKSCluster.Endpoint
  ALBDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt MyALB.DNSName
  S3BucketName:
    Description: The name of the S3 Bucket
    Value: !Ref MyS3Bucket